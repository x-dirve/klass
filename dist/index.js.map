{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { isArray, isBoolean, isObject, isString, isUndefined } from \"@x-drive/utils\";\n\n/**样式连接类型 */\nenum ConnectType {\n    /**驼峰 */\n    Camel\n    /**连接符 */\n    , Line\n}\n\n/**配置项 */\ninterface KlassConfig {\n    /**基础样式名 */\n    base?: string;\n\n    /**连接类型 */\n    type?: ConnectType;\n\n    /**连接符 */\n    connect?: string;\n\n    /**是否追加 */\n    prepend?: boolean;\n}\n\n/**样式生效条件 */\ninterface KlassConditions {\n    [key: string]: boolean;\n}\n\n/**配置方法参数 */\ninterface KlassConfigOptions {\n    /**连接方式 */\n    type?: ConnectType;\n\n    /**连接符号 */\n    symbol?: string;\n}\n\n/**获取第一个字符 */\nconst FIRST_CHAR_REGEXP = /^./;\n\n/**\n * 首字大写\n * @param str 待处理字符串\n */\nfunction firstCharToUpperCase(str: string) {\n    if (isString(str)) {\n        return str.replace(FIRST_CHAR_REGEXP, (m: string) => m.toUpperCase());\n    }\n    return str;\n}\n\n/**默认的连接符 */\nvar defConnect = {\n    [`${ConnectType.Camel}`]: \"\"\n    , [`${ConnectType.Line}`]: \"-\"\n};\n\n/**默认类型 */\nvar defType = ConnectType.Camel;\n\n/**\n * 配置模块默认数据\n * @param conf 配置对象\n * @example\n * ```tsx\n * config({\"type\": 1, \"symbol\": \"___\"});\n * // ...\n * klass({ \"base\": \"comp\", \"prepend\": true }, { \"current\": true, \"act\": true }) // comp comp___current comp___act\n * ```\n */\nexport function config(conf: KlassConfigOptions) {\n    if (isObject(conf)) {\n        const { type = ConnectType.Camel, symbol } = conf;\n        if (isString(symbol)) {\n            // @ts-ignore\n            defConnect[type] = symbol;\n        }\n        if (defType !== type) {\n            defType = type;\n        }\n    }\n}\n\n/**\n * 根据条件生成样式列表\n * @param config      配置项\n * @param conditions  生效条件\n * @param prependBase 是否追加基础样式到输出样式的最前方\n * @example\n * ```tsx\n * klass({ \"current\": true, \"act\": true }) // current act\n * klass(\"comp\", { \"current\": true, \"act\": true }) // compCurrent compAct\n * klass(\"comp\", { \"current\": true, \"act\": true }, true) // comp compCurrent compAct\n * klass([\"comp\", \"current\", { \"act\": true, \"haha\": false }]) // comp current act\n * klass({ \"base\": \"comp\", \"prepend\": true }, { \"current\": true, \"act\": true }) // comp compCurrent compAct\n * klass({ \"base\": \"comp\" }, { \"current\": true, \"act\": true }) // compCurrent compAct\n * klass({ \"base\": \"comp\", \"type\": 1 }, { \"current\": true, \"act\": true }) // comp-current comp-act\n * klass({ \"base\": \"comp\", \"type\": 1, \"connect\": \"__\" }, { \"current\": true, \"act\": true }) //comp__current comp__act\n * ```\n */\nexport default function klass(config: any, conditions?: KlassConditions, prependBase?: boolean) {\n    if (isUndefined(config)) {\n        return \"\";\n    }\n\n    // config 是个数组的直接处理\n    if (isArray(config)) {\n        return config.map(item => {\n            if (isString(item)) {\n                return item;\n            }\n            if (isObject(item)) {\n                return klass(item);\n            }\n            return \"\";\n        }).join(\" \");\n    }\n\n    // 基础样式\n    var klassBase = \"\";\n    // 连接符\n    var klassLink = \"\";\n    // 拼接类型\n    var klassConnect = defType;\n    // 是否追加基础样式\n    var klassPrepend = isBoolean(prependBase) ? prependBase : false;\n\n    // 处理配置\n    if (isString(config)) {\n        klassBase = config;\n    } else {\n        const { base, connect, type = defType, prepend = false } = config as KlassConfig;\n        klassLink = connect || (defConnect[type]);\n        if (!isUndefined(base)) {\n            // @ts-ignore\n            klassBase = base;\n        }\n        if (!isUndefined(type)) {\n            klassConnect = type;\n        }\n        if (isBoolean(prepend)) {\n            klassPrepend = prepend;\n        }\n    }\n\n    // 处理条件\n    var classNameConditions;\n    if (isUndefined(conditions)) {\n        if (isString(config)) {\n            classNameConditions = {\n                [`${config}`]: true\n            };\n        } else {\n            classNameConditions = config;\n        }\n    } else {\n        classNameConditions = conditions;\n    }\n\n    // 生成样式数组\n    const classNames = Object.keys(classNameConditions)\n        .filter(key => classNameConditions[key])\n        .map(name => {\n            if (klassBase) {\n                switch (klassConnect) {\n                    case ConnectType.Camel:\n                        name = `${klassBase}${klassLink}${firstCharToUpperCase(name)}`;\n                        break;\n                    case ConnectType.Line:\n                        name = [klassBase, name].join(klassLink);\n                        break;\n                }\n            }\n            return name;\n        });\n\n    // 是否追加\n    if (klassPrepend && klassBase) {\n        classNames.unshift(klassBase);\n    }\n    return classNames.join(\" \");\n}"],"names":["const","isString","isObject","isUndefined","isArray","isBoolean"],"mappings":"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"}